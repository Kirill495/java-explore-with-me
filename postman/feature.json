{
	"info": {
		"_postman_id": "0f2b9dca-ccc3-41a8-8ce9-d5567e48751e",
		"name": "Test Explore With Me - Comments feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13714305"
	},
	"item": [
		{
			"name": "Сomments",
			"item": [
				{
					"name": "Admin API",
					"item": [
						{
							"name": "update comment (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn, event\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('event');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данными в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        var commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id)\r",
											"        commentContent = rnd.getComment()\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove comment (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment();\r",
											"        const comment = await api.addComment(user.id, event.id, commentContent);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove non-existent comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment();\r",
											"        const comment = await api.addComment(user.id, event.id, commentContent);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id + 1);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove comment with id = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        pm.collectionVariables.set(\"commentId\", 0);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private API",
					"item": [
						{
							"name": "add comment (success)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn, event\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('event');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment with userId < 0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", -1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment to non published event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно соответствовать запросу и коду ошибки\", function () {\r",
											"    pm.expect(target).to.have.property(\"message\");\r",
											"    pm.expect(target.message).equal(\"Only published events can be commented\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment to rejected event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id+1);\r",
											"        const event1 = await api.rejectEvent(event.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment to non existent event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id + 1);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно соответствовать запросу и коду ошибки\", function () {\r",
											"    pm.expect(target.message).equal(\"Event with id=\" + pm.collectionVariables.get(\"eventId\") + \" was not found\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment by non existent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id+1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(rnd.getComment()),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно соответствовать запросу и коду ошибки\", function () {\r",
											"    pm.expect(target.message).equal(\"User with id=\" + pm.collectionVariables.get(\"userId\") + \" was not found\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment with null text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id+1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = rnd.getComment();\r",
											"        comment.text = null;\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(comment),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"        \r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно соответствовать запросу и коду ошибки\", function () {\r",
											"    pm.expect(target.message).equal(\"Field: text. Error: must not be blank. Value: null\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment with text, consisting only whitespaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id+1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = rnd.getComment();\r",
											"        comment.text = \"    \";\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(comment),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"        \r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment with text length < 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id+1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = rnd.getComment();\r",
											"        comment.text = rnd.getWord(9);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(comment),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"        \r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add comment with text length > 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id+1);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = rnd.getComment();\r",
											"        comment.text = rnd.getWord(501);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(comment),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"        \r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn, event\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('event');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данными в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id)\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update non existent comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id + 1)\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно содержвать идентификатор несуществующего комментария\", function () {\r",
											"    pm.expect(target).to.have.property(\"message\");\r",
											"    pm.expect(target.message).equal(\"Comment with id=\" + pm.collectionVariables.get(\"commentId\") + \" was not found.\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment by non-existent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"userId\", user.id + 1);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно содержвать идентификатор несуществующего пользователя\", function () {\r",
											"    pm.expect(target).to.have.property(\"message\");\r",
											"    pm.expect(target.message).equal(\"User with id=\" + pm.collectionVariables.get(\"userId\") + \" was not found\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update another user comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно содержвать идентификатор несуществующего пользователя\", function () {\r",
											"    pm.expect(target).to.have.property(\"message\");\r",
											"    pm.expect(target.message).equal(\"User with id=\" + pm.collectionVariables.get(\"userId\") + \" is not author of comment with id=\"+pm.collectionVariables.get(\"commentId\"), \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment with null text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        commentContent.text = null;\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"target = pm.response.json();\r",
											"pm.test(\"Сообщение ответа должно соответствовать запросу и коду ошибки\", function () {\r",
											"    pm.expect(target.message).equal(\"Field: text. Error: must not be blank. Value: null\", \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment with blank text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        commentContent.text = \"\";\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment with text length < 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        commentContent.text = rnd.getWord(5);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment with text length > 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        commentContent.text = rnd.getWord(501);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment with text length > 500 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        commentContent.text = rnd.getWord(501);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        pm.request.body.update({\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(commentContent),\r",
											"                options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove comment (success)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove non existent comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id+1);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove comment by non existent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        )\r",
											"        pm.collectionVariables.set(\"userId\", user.id + 1);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove other user comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const commentContent = rnd.getComment()\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            commentContent\r",
											"        );\r",
											"        const newUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", newUser.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"target = pm.response.json();\r",
											"variables = pm.collectionVariables;\r",
											"pm.test(\"Сообщение ответа должно содержвать идентификатор тек. пользователя и идентификатор комментария\", function () {\r",
											"    pm.expect(target).to.have.property(\"message\");\r",
											"    pm.expect(target.message).equal(\"User with id=\" + variables.get(\"userId\") + \" is not author of comment with id=\" + variables.get(\"commentId\"), \"Текст сообщения должен соответствовать стандартному тескту сообщения о подобной ошибке\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        \r",
											"        const comment1 = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"\r",
											"        pm.collectionVariables.set('comment0', comment0);\r",
											"        pm.collectionVariables.set('comment1', comment1);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment0 = pm.collectionVariables.get(\"comment0\");\r",
											"const comment1 = pm.collectionVariables.get(\"comment1\");\r",
											"pm.test(\"Ответ должен содержать список из двух комментариев\", function() {\r",
											"    pm.expect(target.length).equals(2);\r",
											"})\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('event');\r",
											"    pm.expect(target[0]).to.have.property('author');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка содержимого списка комментариев\", function () {\r",
											"    pm.expect(target[0].id).to.equal(comment0.id);\r",
											"    pm.expect(target[0].event).equal(comment0.event.id);\r",
											"    pm.expect(target[0].author).equal(comment0.author.id);\r",
											"    pm.expect(target[0].text).equal(comment0.text);\r",
											"    pm.expect(target[0].createdOn).equal(comment0.createdOn);\r",
											"\r",
											"\tpm.expect(target[1].id).to.equal(comment1.id);\r",
											"    pm.expect(target[1].event).equal(comment1.event.id);\r",
											"    pm.expect(target[1].author).equal(comment1.author.id);\r",
											"    pm.expect(target[1].text).equal(comment1.text);\r",
											"    pm.expect(target[1].createdOn).equal(comment1.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comments (filter by event)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const eventsAuthor = await api.addUser(rnd.getUser());\r",
											"        const commentsAuthor = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        var event0 = await api.addEvent(eventsAuthor.id, rnd.getEvent(category.id));\r",
											"        event0 = await api.publishEvent(event0.id);\r",
											"\r",
											"        var event1 = await api.addEvent(eventsAuthor.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"\r",
											"        const comment0 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        \r",
											"        const comment2 = await api.addComment(commentsAuthor.id, event1.id, rnd.getComment());\r",
											"        const comment3 = await api.addComment(commentsAuthor.id, event1.id, rnd.getComment());\r",
											"\r",
											"        pm.request.addQueryParams([`events=` + event0.id]);\r",
											"        pm.collectionVariables.set(\"userId\", commentsAuthor.id);\r",
											"        // pm.collectionVariables.set(\"events\", {event0.id, event1.id});\r",
											"        pm.collectionVariables.set('comment0', comment0);\r",
											"        pm.collectionVariables.set('comment1', comment1);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment0 = pm.collectionVariables.get(\"comment0\");\r",
											"const comment1 = pm.collectionVariables.get(\"comment1\");\r",
											"pm.test(\"Ответ должен содержать список из двух комментариев\", function() {\r",
											"    pm.expect(target.length).equals(2);\r",
											"})\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('event');\r",
											"    pm.expect(target[0]).to.have.property('author');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка содержимого списка комментариев\", function () {\r",
											"    pm.expect(target[0].id).to.equal(comment0.id);\r",
											"    pm.expect(target[0].event).equal(comment0.event.id);\r",
											"    pm.expect(target[0].author).equal(comment0.author.id);\r",
											"    pm.expect(target[0].text).equal(comment0.text);\r",
											"    pm.expect(target[0].createdOn).equal(comment0.createdOn);\r",
											"\r",
											"\tpm.expect(target[1].id).to.equal(comment1.id);\r",
											"    pm.expect(target[1].event).equal(comment1.event.id);\r",
											"    pm.expect(target[1].author).equal(comment1.author.id);\r",
											"    pm.expect(target[1].text).equal(comment1.text);\r",
											"    pm.expect(target[1].createdOn).equal(comment1.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comments (filter by text)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const eventsAuthor = await api.addUser(rnd.getUser());\r",
											"        const commentsAuthor = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        var event0 = await api.addEvent(eventsAuthor.id, rnd.getEvent(category.id));\r",
											"        event0 = await api.publishEvent(event0.id);\r",
											"\r",
											"        const comment0 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        \r",
											"        const comment2 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        const comment3 = await api.addComment(commentsAuthor.id, event0.id, rnd.getComment());\r",
											"        \r",
											"        pm.request.addQueryParams([`text=` + comment0.text]);\r",
											"        // pm.request.addQueryParams([`events=` + event0.id, `text=` + comment0.text]);\r",
											"        pm.collectionVariables.set(\"userId\", commentsAuthor.id);\r",
											"        // pm.collectionVariables.set(\"events\", {event0.id, event1.id});\r",
											"        pm.collectionVariables.set('comment0', comment0);\r",
											"        // pm.collectionVariables.set('comment1', comment1);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment0 = pm.collectionVariables.get(\"comment0\");\r",
											"const comment1 = pm.collectionVariables.get(\"comment1\");\r",
											"pm.test(\"Ответ должен содержать список из двух комментариев\", function() {\r",
											"    pm.expect(target.length).equals(1);\r",
											"})\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('event');\r",
											"    pm.expect(target[0]).to.have.property('author');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка содержимого списка комментариев\", function () {\r",
											"    pm.expect(target[0].id).to.equal(comment0.id);\r",
											"    pm.expect(target[0].event).equal(comment0.event.id);\r",
											"    pm.expect(target[0].author).equal(comment0.author.id);\r",
											"    pm.expect(target[0].text).equal(comment0.text);\r",
											"    pm.expect(target[0].createdOn).equal(comment0.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comments by non-existent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id + 1);\r",
											"\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comment by Id (success)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        \r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"\r",
											"        pm.collectionVariables.set('comment', comment);\r",
											"                \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment = pm.collectionVariables.get(\"comment\");\r",
											"\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('author');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка полей комментария в ответе\", function () {\r",
											"    pm.expect(target.id).to.equal(comment.id);\r",
											"    pm.expect(target.event.id).equal(comment.event.id);\r",
											"    pm.expect(target.author.id).equal(comment.author.id);\r",
											"    pm.expect(target.text).equal(comment.text);\r",
											"    pm.expect(target.createdOn).equal(comment.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comment by Id non-existent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        \r",
											"        pm.collectionVariables.set(\"userId\", user.id + 1);\r",
											"        pm.collectionVariables.set(\"commentId\", comment0.id);\r",
											"\r",
											"        pm.collectionVariables.set('comment0', comment0);\r",
											"                \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"const error = pm.response.json();\r",
											"pm.test(\"Текст ошибки должен содержать ID несуществующего пользователя\", function () {\r",
											"    pm.expect(error.message).to.equal(\"User with id=\"+pm.collectionVariables.get(\"userId\")+\" was not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comment by Id non-existent comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        \r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment0.id + 1);\r",
											"\r",
											"                \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"const error = pm.response.json();\r",
											"pm.test(\"Текст ошибки должен содержать ID несуществующего комментария\", function () {\r",
											"    pm.expect(error.message).to.equal(\"Comment with id=\" + pm.collectionVariables.get(\"commentId\") + \" was not found.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user comment by Id (another user)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(\r",
											"            user.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment0.id);\r",
											"                \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public API",
					"item": [
						{
							"name": "get all comments to event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user1.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment1 = await api.addComment(\r",
											"            user1.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        const comment2 = await api.addComment(\r",
											"            user2.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        const comment3 = await api.addComment(\r",
											"            user2.id,\r",
											"            event.id,\r",
											"            rnd.getComment()\r",
											"        );\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"\r",
											"        pm.collectionVariables.set('comment0', comment1);\r",
											"        pm.collectionVariables.set('comment1', comment2);\r",
											"        pm.collectionVariables.set('comment2', comment3);        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment0 = pm.collectionVariables.get(\"comment0\");\r",
											"const comment1 = pm.collectionVariables.get(\"comment1\");\r",
											"const comment2 = pm.collectionVariables.get(\"comment2\");\r",
											"pm.test(\"Ответ должен содержать список из трех комментариев\", function() {\r",
											"    pm.expect(target.length).equals(3);\r",
											"})\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('event');\r",
											"    pm.expect(target[0]).to.have.property('author');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка содержимого списка комментариев\", function () {\r",
											"\r",
											"    pm.expect(target[0].id).to.equal(comment0.id);\r",
											"    pm.expect(target[0].event).equal(comment0.event.id);\r",
											"    pm.expect(target[0].author).equal(comment0.author.id);\r",
											"    pm.expect(target[0].text).equal(comment0.text);\r",
											"    pm.expect(target[0].createdOn).equal(comment0.createdOn);\r",
											"\r",
											"\tpm.expect(target[1].id).to.equal(comment1.id);\r",
											"    pm.expect(target[1].event).equal(comment1.event.id);\r",
											"    pm.expect(target[1].author).equal(comment1.author.id);\r",
											"    pm.expect(target[1].text).equal(comment1.text);\r",
											"    pm.expect(target[1].createdOn).equal(comment1.createdOn);\r",
											"\r",
											"\tpm.expect(target[2].id).to.equal(comment2.id);\r",
											"    pm.expect(target[2].event).equal(comment2.event.id);\r",
											"    pm.expect(target[2].author).equal(comment2.author.id);\r",
											"    pm.expect(target[2].text).equal(comment2.text);\r",
											"    pm.expect(target[2].createdOn).equal(comment2.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get all comments to event (startWith=6, size=3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user1.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment3 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment4 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment5 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment6 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment7 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment8 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment9 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        const comment10 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"from\", 6);\r",
											"        pm.collectionVariables.set(\"size\", 3);\r",
											"\r",
											"        pm.collectionVariables.set('comment6', comment6);\r",
											"        pm.collectionVariables.set('comment7', comment7);\r",
											"        pm.collectionVariables.set('comment8', comment8);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const comment6 = pm.collectionVariables.get(\"comment6\");\r",
											"const comment7 = pm.collectionVariables.get(\"comment7\");\r",
											"const comment8 = pm.collectionVariables.get(\"comment8\");\r",
											"pm.test(\"Ответ должен содержать список из трех комментариев\", function() {\r",
											"    pm.expect(target.length).equals(3);\r",
											"})\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('event');\r",
											"    pm.expect(target[0]).to.have.property('author');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка содержимого списка комментариев\", function () {\r",
											"    pm.expect(target[0].id).to.equal(comment6.id);\r",
											"    pm.expect(target[0].event).equal(comment6.event.id);\r",
											"    pm.expect(target[0].author).equal(comment6.author.id);\r",
											"    pm.expect(target[0].text).equal(comment6.text);\r",
											"    pm.expect(target[0].createdOn).equal(comment6.createdOn);\r",
											"\r",
											"\tpm.expect(target[1].id).to.equal(comment7.id);\r",
											"    pm.expect(target[1].event).equal(comment7.event.id);\r",
											"    pm.expect(target[1].author).equal(comment7.author.id);\r",
											"    pm.expect(target[1].text).equal(comment7.text);\r",
											"    pm.expect(target[1].createdOn).equal(comment7.createdOn);\r",
											"\r",
											"    pm.expect(target[2].id).to.equal(comment8.id);\r",
											"    pm.expect(target[2].event).equal(comment8.event.id);\r",
											"    pm.expect(target[2].author).equal(comment8.author.id);\r",
											"    pm.expect(target[2].text).equal(comment8.text);\r",
											"    pm.expect(target[2].createdOn).equal(comment8.createdOn);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?from={{from}}&size={{size}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "size",
											"value": "{{size}}"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get all comments to event (startWith=6, size=3) should return empty list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(\r",
											"            user1.id,\r",
											"            rnd.getEvent(category.id)\r",
											"        );\r",
											"        const event1 = await api.publishEvent(event.id);\r",
											"        const comment0 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
											"\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"from\", 6);\r",
											"        pm.collectionVariables.set(\"size\", 3);\r",
											"\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"pm.test(\"Ответ должен содержать список из трех комментариев\", function() {\r",
											"    pm.expect(target.length).equals(0);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?from={{from}}&size={{size}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "size",
											"value": "{{size}}"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "тесты для дополнительной функциональности \"комментарии\""
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, comment, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/comments/events/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findComment(userId, commentId, verbose=null) {\r",
					"        return this.get('/users/' + userId + \"/comments/\" + commentId, null, \"Ошибка при поиске комментария по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"\t\treturn this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"\t}\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"\r",
					"                    resolve(response.json());\r",
					"                });\r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getComment() {\r",
					"        return {\r",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
					"        };\r",
					"    }\r",
					"\t\t\t\t\t\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment0",
			"value": ""
		},
		{
			"key": "comment1",
			"value": ""
		},
		{
			"key": "comment",
			"value": ""
		},
		{
			"key": "comment2",
			"value": ""
		},
		{
			"key": "comment3",
			"value": ""
		},
		{
			"key": "from",
			"value": "0"
		},
		{
			"key": "limit",
			"value": "10"
		},
		{
			"key": "eventIdId",
			"value": ""
		},
		{
			"key": "size",
			"value": "10"
		},
		{
			"key": "comment6",
			"value": ""
		},
		{
			"key": "comment7",
			"value": ""
		},
		{
			"key": "comment8",
			"value": ""
		},
		{
			"key": "events",
			"value": ""
		}
	]
}